!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
Accept	csapp.c	/^int Accept(int listenfd, struct sockaddr *addr, int* addrlen)$/;"	f	typeref:typename:int
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds){$/;"	f	typeref:typename:unsigned int
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen)$/;"	f	typeref:typename:void
C01	rtu.h	/^	C01 = 1, $/;"	e	enum:Code
C02	rtu.h	/^	C02, $/;"	e	enum:Code
C03	rtu.h	/^	C03,$/;"	e	enum:Code
C04	rtu.h	/^	C04,$/;"	e	enum:Code
C05	rtu.h	/^	C05,$/;"	e	enum:Code
C06	rtu.h	/^	C06,$/;"	e	enum:Code
C07	rtu.h	/^	C07,$/;"	e	enum:Code
C08	rtu.h	/^	C08$/;"	e	enum:Code
COMMAND	rtu.h	/^#define 	COMMAND	/;"	d
CRC	rtu.h	/^#define		CRC	/;"	d
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
Close	csapp.c	/^void Close(int connfd)$/;"	f	typeref:typename:void
Code	rtu.h	/^typedef enum Code { $/;"	g
Code	rtu.h	/^} Code;$/;"	t	typeref:enum:Code
DATAREGNUM	rtu.h	/^#define		DATAREGNUM	/;"	d
DB_close	dosqlite.c	/^void DB_close(void *con)$/;"	f	typeref:typename:void
DB_close	qtsqlite.c	/^void DB_close(void *con)$/;"	f	typeref:typename:void
DB_exec	dosqlite.c	/^int DB_exec(void *con ,const char *SQL, $/;"	f	typeref:typename:int
DB_exec	qtsqlite.c	/^int DB_exec(void *con ,const char *SQL, $/;"	f	typeref:typename:int
DB_init	dosqlite.c	/^void *DB_init()$/;"	f	typeref:typename:void *
DB_init	qtsqlite.c	/^void *DB_init()$/;"	f	typeref:typename:void *
DEBUG	rtu.h	/^#define DEBUG$/;"	d
DEST	rtu.h	/^#define 	DEST /;"	d
Data	rtu.h	/^} Data;$/;"	t	typeref:struct:__anon104f7d960208
Dsp	rtu.h	/^}Dsp;$/;"	t	typeref:struct:__anon104f7d960308
Dup2	csapp.c	/^int Dup2(int fd1, int fd2)$/;"	f	typeref:typename:int
ERRCRC	rtu.h	/^#define 	ERRCRC	/;"	d
ERRDTURECV	rtu.h	/^#define 	ERRDTURECV	/;"	d
ERRFORMAT	rtu.h	/^#define 	ERRFORMAT /;"	d
ERRLENGTH	rtu.h	/^#define 	ERRLENGTH	/;"	d
Env	rtu.h	/^}Env;$/;"	t	typeref:struct:__anon104f7d960408
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[])$/;"	f	typeref:typename:void
FTS5_TOKENIZE_AUX	sqlite3.h	/^#define FTS5_TOKENIZE_AUX /;"	d
FTS5_TOKENIZE_DOCUMENT	sqlite3.h	/^#define FTS5_TOKENIZE_DOCUMENT /;"	d
FTS5_TOKENIZE_PREFIX	sqlite3.h	/^#define FTS5_TOKENIZE_PREFIX /;"	d
FTS5_TOKENIZE_QUERY	sqlite3.h	/^#define FTS5_TOKENIZE_QUERY /;"	d
FTS5_TOKEN_COLOCATED	sqlite3.h	/^#define FTS5_TOKEN_COLOCATED /;"	d
FULLY_WITHIN	sqlite3.h	/^#define FULLY_WITHIN /;"	d
Fclose	csapp.c	/^void Fclose(FILE *fp)$/;"	f	typeref:typename:void
Fdopen	csapp.c	/^FILE *Fdopen( int fd, const char *type)$/;"	f	typeref:typename:FILE *
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE * stream)$/;"	f	typeref:typename:char *
Fopen	csapp.c	/^FILE *Fopen(const char * filename , const char *mode)$/;"	f	typeref:typename:FILE *
Fork	csapp.c	/^pid_t Fork(void)$/;"	f	typeref:typename:pid_t
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream)$/;"	f	typeref:typename:void
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f	typeref:typename:size_t
Free	csapp.c	/^void Free(void *ptr)$/;"	f	typeref:typename:void
Fts5Context	sqlite3.h	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context
Fts5ExtensionApi	sqlite3.h	/^struct Fts5ExtensionApi {$/;"	s
Fts5ExtensionApi	sqlite3.h	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi
Fts5PhraseIter	sqlite3.h	/^struct Fts5PhraseIter {$/;"	s
Fts5PhraseIter	sqlite3.h	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter
Fts5Tokenizer	sqlite3.h	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f	typeref:typename:void
GetSysDate	csapp.c	/^char *GetSysDate(int i)$/;"	f	typeref:typename:char *
Getpgrp	csapp.c	/^pid_t Getpgrp(void){$/;"	f	typeref:typename:pid_t
HEAD	rtu.h	/^#define 	HEAD /;"	d
Kill	csapp.c	/^void Kill(pid_t pid, int signum)$/;"	f	typeref:typename:void
LDST485	uartconfig.h	/^#define LDST485	/;"	d
LENGTH	rtu.h	/^#define 	LENGTH /;"	d
LINUX	csapp.h	/^#define LINUX$/;"	d
LISTENQ	csapp.h	/^#define LISTENQ /;"	d
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence)$/;"	f	typeref:typename:off_t
MAXDSP	rtu.h	/^#define 	MAXDSP /;"	d
MAXDSPNUM	rtu.h	/^#define		MAXDSPNUM	/;"	d
MAXLINE	csapp.h	/^#define MAXLINE /;"	d
Malloc	csapp.c	/^void * Malloc(size_t size)$/;"	f	typeref:typename:void *
NDRF485	uartconfig.h	/^#define NDRF485	/;"	d
NDST485	uartconfig.h	/^#define NDST485	/;"	d
NOT_WITHIN	sqlite3.h	/^#define NOT_WITHIN /;"	d
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode)$/;"	f	typeref:typename:int
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, int port)$/;"	f	typeref:typename:int
Open_listenfd	csapp.c	/^int Open_listenfd(int port)$/;"	f	typeref:typename:int
PARTLY_WITHIN	sqlite3.h	/^#define PARTLY_WITHIN /;"	d
Pause	csapp.c	/^void Pause()$/;"	f	typeref:typename:void
RIO_BUFSIZE	csapp.h	/^#define RIO_BUFSIZE /;"	d
RTU_H__	rtu.h	/^#define RTU_H__$/;"	d
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size)$/;"	f	typeref:typename:void *
Reg	rtu.h	/^}Reg;$/;"	t	typeref:struct:__anon104f7d960108
Rio_read	csapp.c	/^static ssize_t Rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	typeref:typename:ssize_t	file:
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f	typeref:typename:void
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen)$/;"	f	typeref:typename:ssize_t
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *userbuf, size_t n)$/;"	f	typeref:typename:ssize_t
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n)$/;"	f	typeref:typename:ssize_t
Rio_writen	csapp.c	/^ssize_t Rio_writen(int fd, void *userbuf, size_t n)$/;"	f	typeref:typename:ssize_t
SA	csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SQLITE3_H	sqlite3.h	/^#define SQLITE3_H$/;"	d
SQLITE3_TEXT	sqlite3.h	/^#define SQLITE3_TEXT /;"	d
SQLITE_ABORT	sqlite3.h	/^#define SQLITE_ABORT /;"	d
SQLITE_ABORT_ROLLBACK	sqlite3.h	/^#define SQLITE_ABORT_ROLLBACK /;"	d
SQLITE_ACCESS_EXISTS	sqlite3.h	/^#define SQLITE_ACCESS_EXISTS /;"	d
SQLITE_ACCESS_READ	sqlite3.h	/^#define SQLITE_ACCESS_READ /;"	d
SQLITE_ACCESS_READWRITE	sqlite3.h	/^#define SQLITE_ACCESS_READWRITE /;"	d
SQLITE_ALTER_TABLE	sqlite3.h	/^#define SQLITE_ALTER_TABLE /;"	d
SQLITE_ANALYZE	sqlite3.h	/^#define SQLITE_ANALYZE /;"	d
SQLITE_ANY	sqlite3.h	/^#define SQLITE_ANY /;"	d
SQLITE_API	sqlite3.h	/^# define SQLITE_API$/;"	d
SQLITE_APICALL	sqlite3.h	/^# define SQLITE_APICALL$/;"	d
SQLITE_ATTACH	sqlite3.h	/^#define SQLITE_ATTACH /;"	d
SQLITE_AUTH	sqlite3.h	/^#define SQLITE_AUTH /;"	d
SQLITE_AUTH_USER	sqlite3.h	/^#define SQLITE_AUTH_USER /;"	d
SQLITE_BLOB	sqlite3.h	/^#define SQLITE_BLOB /;"	d
SQLITE_BUSY	sqlite3.h	/^#define SQLITE_BUSY /;"	d
SQLITE_BUSY_RECOVERY	sqlite3.h	/^#define SQLITE_BUSY_RECOVERY /;"	d
SQLITE_BUSY_SNAPSHOT	sqlite3.h	/^#define SQLITE_BUSY_SNAPSHOT /;"	d
SQLITE_CALLBACK	sqlite3.h	/^# define SQLITE_CALLBACK$/;"	d
SQLITE_CANTOPEN	sqlite3.h	/^#define SQLITE_CANTOPEN /;"	d
SQLITE_CANTOPEN_CONVPATH	sqlite3.h	/^#define SQLITE_CANTOPEN_CONVPATH /;"	d
SQLITE_CANTOPEN_DIRTYWAL	sqlite3.h	/^#define SQLITE_CANTOPEN_DIRTYWAL /;"	d
SQLITE_CANTOPEN_FULLPATH	sqlite3.h	/^#define SQLITE_CANTOPEN_FULLPATH /;"	d
SQLITE_CANTOPEN_ISDIR	sqlite3.h	/^#define SQLITE_CANTOPEN_ISDIR /;"	d
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3.h	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d
SQLITE_CDECL	sqlite3.h	/^# define SQLITE_CDECL$/;"	d
SQLITE_CHANGESETAPPLY_INVERT	sqlite3.h	/^#define SQLITE_CHANGESETAPPLY_INVERT /;"	d
SQLITE_CHANGESETAPPLY_NOSAVEPOINT	sqlite3.h	/^#define SQLITE_CHANGESETAPPLY_NOSAVEPOINT /;"	d
SQLITE_CHANGESETSTART_INVERT	sqlite3.h	/^#define SQLITE_CHANGESETSTART_INVERT /;"	d
SQLITE_CHANGESET_ABORT	sqlite3.h	/^#define SQLITE_CHANGESET_ABORT /;"	d
SQLITE_CHANGESET_CONFLICT	sqlite3.h	/^#define SQLITE_CHANGESET_CONFLICT /;"	d
SQLITE_CHANGESET_CONSTRAINT	sqlite3.h	/^#define SQLITE_CHANGESET_CONSTRAINT /;"	d
SQLITE_CHANGESET_DATA	sqlite3.h	/^#define SQLITE_CHANGESET_DATA /;"	d
SQLITE_CHANGESET_FOREIGN_KEY	sqlite3.h	/^#define SQLITE_CHANGESET_FOREIGN_KEY /;"	d
SQLITE_CHANGESET_NOTFOUND	sqlite3.h	/^#define SQLITE_CHANGESET_NOTFOUND /;"	d
SQLITE_CHANGESET_OMIT	sqlite3.h	/^#define SQLITE_CHANGESET_OMIT /;"	d
SQLITE_CHANGESET_REPLACE	sqlite3.h	/^#define SQLITE_CHANGESET_REPLACE /;"	d
SQLITE_CHECKPOINT_FULL	sqlite3.h	/^#define SQLITE_CHECKPOINT_FULL /;"	d
SQLITE_CHECKPOINT_PASSIVE	sqlite3.h	/^#define SQLITE_CHECKPOINT_PASSIVE /;"	d
SQLITE_CHECKPOINT_RESTART	sqlite3.h	/^#define SQLITE_CHECKPOINT_RESTART /;"	d
SQLITE_CHECKPOINT_TRUNCATE	sqlite3.h	/^#define SQLITE_CHECKPOINT_TRUNCATE /;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite3.h	/^#define SQLITE_CONFIG_COVERING_INDEX_SCAN /;"	d
SQLITE_CONFIG_GETMALLOC	sqlite3.h	/^#define SQLITE_CONFIG_GETMALLOC /;"	d
SQLITE_CONFIG_GETMUTEX	sqlite3.h	/^#define SQLITE_CONFIG_GETMUTEX /;"	d
SQLITE_CONFIG_GETPCACHE	sqlite3.h	/^#define SQLITE_CONFIG_GETPCACHE /;"	d
SQLITE_CONFIG_GETPCACHE2	sqlite3.h	/^#define SQLITE_CONFIG_GETPCACHE2 /;"	d
SQLITE_CONFIG_HEAP	sqlite3.h	/^#define SQLITE_CONFIG_HEAP /;"	d
SQLITE_CONFIG_LOG	sqlite3.h	/^#define SQLITE_CONFIG_LOG /;"	d
SQLITE_CONFIG_LOOKASIDE	sqlite3.h	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d
SQLITE_CONFIG_MALLOC	sqlite3.h	/^#define SQLITE_CONFIG_MALLOC /;"	d
SQLITE_CONFIG_MEMSTATUS	sqlite3.h	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d
SQLITE_CONFIG_MMAP_SIZE	sqlite3.h	/^#define SQLITE_CONFIG_MMAP_SIZE /;"	d
SQLITE_CONFIG_MULTITHREAD	sqlite3.h	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d
SQLITE_CONFIG_MUTEX	sqlite3.h	/^#define SQLITE_CONFIG_MUTEX /;"	d
SQLITE_CONFIG_PAGECACHE	sqlite3.h	/^#define SQLITE_CONFIG_PAGECACHE /;"	d
SQLITE_CONFIG_PCACHE	sqlite3.h	/^#define SQLITE_CONFIG_PCACHE /;"	d
SQLITE_CONFIG_PCACHE2	sqlite3.h	/^#define SQLITE_CONFIG_PCACHE2 /;"	d
SQLITE_CONFIG_PCACHE_HDRSZ	sqlite3.h	/^#define SQLITE_CONFIG_PCACHE_HDRSZ /;"	d
SQLITE_CONFIG_PMASZ	sqlite3.h	/^#define SQLITE_CONFIG_PMASZ /;"	d
SQLITE_CONFIG_SCRATCH	sqlite3.h	/^#define SQLITE_CONFIG_SCRATCH /;"	d
SQLITE_CONFIG_SERIALIZED	sqlite3.h	/^#define SQLITE_CONFIG_SERIALIZED /;"	d
SQLITE_CONFIG_SINGLETHREAD	sqlite3.h	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d
SQLITE_CONFIG_SMALL_MALLOC	sqlite3.h	/^#define SQLITE_CONFIG_SMALL_MALLOC /;"	d
SQLITE_CONFIG_SORTERREF_SIZE	sqlite3.h	/^#define SQLITE_CONFIG_SORTERREF_SIZE /;"	d
SQLITE_CONFIG_SQLLOG	sqlite3.h	/^#define SQLITE_CONFIG_SQLLOG /;"	d
SQLITE_CONFIG_STMTJRNL_SPILL	sqlite3.h	/^#define SQLITE_CONFIG_STMTJRNL_SPILL /;"	d
SQLITE_CONFIG_URI	sqlite3.h	/^#define SQLITE_CONFIG_URI /;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite3.h	/^#define SQLITE_CONFIG_WIN32_HEAPSIZE /;"	d
SQLITE_CONSTRAINT	sqlite3.h	/^#define SQLITE_CONSTRAINT /;"	d
SQLITE_CONSTRAINT_CHECK	sqlite3.h	/^#define SQLITE_CONSTRAINT_CHECK /;"	d
SQLITE_CONSTRAINT_COMMITHOOK	sqlite3.h	/^#define SQLITE_CONSTRAINT_COMMITHOOK /;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite3.h	/^#define SQLITE_CONSTRAINT_FOREIGNKEY /;"	d
SQLITE_CONSTRAINT_FUNCTION	sqlite3.h	/^#define SQLITE_CONSTRAINT_FUNCTION /;"	d
SQLITE_CONSTRAINT_NOTNULL	sqlite3.h	/^#define SQLITE_CONSTRAINT_NOTNULL /;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite3.h	/^#define SQLITE_CONSTRAINT_PRIMARYKEY /;"	d
SQLITE_CONSTRAINT_ROWID	sqlite3.h	/^#define SQLITE_CONSTRAINT_ROWID /;"	d
SQLITE_CONSTRAINT_TRIGGER	sqlite3.h	/^#define SQLITE_CONSTRAINT_TRIGGER /;"	d
SQLITE_CONSTRAINT_UNIQUE	sqlite3.h	/^#define SQLITE_CONSTRAINT_UNIQUE /;"	d
SQLITE_CONSTRAINT_VTAB	sqlite3.h	/^#define SQLITE_CONSTRAINT_VTAB /;"	d
SQLITE_COPY	sqlite3.h	/^#define SQLITE_COPY /;"	d
SQLITE_CORRUPT	sqlite3.h	/^#define SQLITE_CORRUPT /;"	d
SQLITE_CORRUPT_SEQUENCE	sqlite3.h	/^#define SQLITE_CORRUPT_SEQUENCE /;"	d
SQLITE_CORRUPT_VTAB	sqlite3.h	/^#define SQLITE_CORRUPT_VTAB /;"	d
SQLITE_CREATE_INDEX	sqlite3.h	/^#define SQLITE_CREATE_INDEX /;"	d
SQLITE_CREATE_TABLE	sqlite3.h	/^#define SQLITE_CREATE_TABLE /;"	d
SQLITE_CREATE_TEMP_INDEX	sqlite3.h	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d
SQLITE_CREATE_TEMP_TABLE	sqlite3.h	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d
SQLITE_CREATE_TEMP_TRIGGER	sqlite3.h	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d
SQLITE_CREATE_TEMP_VIEW	sqlite3.h	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d
SQLITE_CREATE_TRIGGER	sqlite3.h	/^#define SQLITE_CREATE_TRIGGER /;"	d
SQLITE_CREATE_VIEW	sqlite3.h	/^#define SQLITE_CREATE_VIEW /;"	d
SQLITE_CREATE_VTABLE	sqlite3.h	/^#define SQLITE_CREATE_VTABLE /;"	d
SQLITE_DBCONFIG_DEFENSIVE	sqlite3.h	/^#define SQLITE_DBCONFIG_DEFENSIVE /;"	d
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_FKEY /;"	d
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER /;"	d
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION /;"	d
SQLITE_DBCONFIG_ENABLE_QPSG	sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_QPSG /;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_TRIGGER /;"	d
SQLITE_DBCONFIG_LOOKASIDE	sqlite3.h	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d
SQLITE_DBCONFIG_MAINDBNAME	sqlite3.h	/^#define SQLITE_DBCONFIG_MAINDBNAME /;"	d
SQLITE_DBCONFIG_MAX	sqlite3.h	/^#define SQLITE_DBCONFIG_MAX /;"	d
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	sqlite3.h	/^#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE /;"	d
SQLITE_DBCONFIG_RESET_DATABASE	sqlite3.h	/^#define SQLITE_DBCONFIG_RESET_DATABASE /;"	d
SQLITE_DBCONFIG_TRIGGER_EQP	sqlite3.h	/^#define SQLITE_DBCONFIG_TRIGGER_EQP /;"	d
SQLITE_DBSTATUS_CACHE_HIT	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_HIT /;"	d
SQLITE_DBSTATUS_CACHE_MISS	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_MISS /;"	d
SQLITE_DBSTATUS_CACHE_SPILL	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_SPILL /;"	d
SQLITE_DBSTATUS_CACHE_USED	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d
SQLITE_DBSTATUS_CACHE_USED_SHARED	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_USED_SHARED /;"	d
SQLITE_DBSTATUS_CACHE_WRITE	sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_WRITE /;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite3.h	/^#define SQLITE_DBSTATUS_DEFERRED_FKS /;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_HIT /;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL /;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE /;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d
SQLITE_DBSTATUS_MAX	sqlite3.h	/^#define SQLITE_DBSTATUS_MAX /;"	d
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3.h	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d
SQLITE_DBSTATUS_STMT_USED	sqlite3.h	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d
SQLITE_DELETE	sqlite3.h	/^#define SQLITE_DELETE /;"	d
SQLITE_DENY	sqlite3.h	/^#define SQLITE_DENY /;"	d
SQLITE_DEPRECATED	sqlite3.h	/^#define SQLITE_DEPRECATED$/;"	d
SQLITE_DESERIALIZE_FREEONCLOSE	sqlite3.h	/^#define SQLITE_DESERIALIZE_FREEONCLOSE /;"	d
SQLITE_DESERIALIZE_READONLY	sqlite3.h	/^#define SQLITE_DESERIALIZE_READONLY /;"	d
SQLITE_DESERIALIZE_RESIZEABLE	sqlite3.h	/^#define SQLITE_DESERIALIZE_RESIZEABLE /;"	d
SQLITE_DETACH	sqlite3.h	/^#define SQLITE_DETACH /;"	d
SQLITE_DETERMINISTIC	sqlite3.h	/^#define SQLITE_DETERMINISTIC /;"	d
SQLITE_DONE	sqlite3.h	/^#define SQLITE_DONE /;"	d
SQLITE_DROP_INDEX	sqlite3.h	/^#define SQLITE_DROP_INDEX /;"	d
SQLITE_DROP_TABLE	sqlite3.h	/^#define SQLITE_DROP_TABLE /;"	d
SQLITE_DROP_TEMP_INDEX	sqlite3.h	/^#define SQLITE_DROP_TEMP_INDEX /;"	d
SQLITE_DROP_TEMP_TABLE	sqlite3.h	/^#define SQLITE_DROP_TEMP_TABLE /;"	d
SQLITE_DROP_TEMP_TRIGGER	sqlite3.h	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d
SQLITE_DROP_TEMP_VIEW	sqlite3.h	/^#define SQLITE_DROP_TEMP_VIEW /;"	d
SQLITE_DROP_TRIGGER	sqlite3.h	/^#define SQLITE_DROP_TRIGGER /;"	d
SQLITE_DROP_VIEW	sqlite3.h	/^#define SQLITE_DROP_VIEW /;"	d
SQLITE_DROP_VTABLE	sqlite3.h	/^#define SQLITE_DROP_VTABLE /;"	d
SQLITE_EMPTY	sqlite3.h	/^#define SQLITE_EMPTY /;"	d
SQLITE_ERROR	sqlite3.h	/^#define SQLITE_ERROR /;"	d
SQLITE_ERROR_MISSING_COLLSEQ	sqlite3.h	/^#define SQLITE_ERROR_MISSING_COLLSEQ /;"	d
SQLITE_ERROR_RETRY	sqlite3.h	/^#define SQLITE_ERROR_RETRY /;"	d
SQLITE_ERROR_SNAPSHOT	sqlite3.h	/^#define SQLITE_ERROR_SNAPSHOT /;"	d
SQLITE_EXPERIMENTAL	sqlite3.h	/^#define SQLITE_EXPERIMENTAL$/;"	d
SQLITE_EXTERN	sqlite3.h	/^# define SQLITE_EXTERN /;"	d
SQLITE_FAIL	sqlite3.h	/^#define SQLITE_FAIL /;"	d
SQLITE_FCNTL_BEGIN_ATOMIC_WRITE	sqlite3.h	/^#define SQLITE_FCNTL_BEGIN_ATOMIC_WRITE /;"	d
SQLITE_FCNTL_BUSYHANDLER	sqlite3.h	/^#define SQLITE_FCNTL_BUSYHANDLER /;"	d
SQLITE_FCNTL_CHUNK_SIZE	sqlite3.h	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d
SQLITE_FCNTL_COMMIT_ATOMIC_WRITE	sqlite3.h	/^#define SQLITE_FCNTL_COMMIT_ATOMIC_WRITE /;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite3.h	/^#define SQLITE_FCNTL_COMMIT_PHASETWO /;"	d
SQLITE_FCNTL_DATA_VERSION	sqlite3.h	/^#define SQLITE_FCNTL_DATA_VERSION /;"	d
SQLITE_FCNTL_FILE_POINTER	sqlite3.h	/^#define SQLITE_FCNTL_FILE_POINTER /;"	d
SQLITE_FCNTL_GET_LOCKPROXYFILE	sqlite3.h	/^#define SQLITE_FCNTL_GET_LOCKPROXYFILE /;"	d
SQLITE_FCNTL_HAS_MOVED	sqlite3.h	/^#define SQLITE_FCNTL_HAS_MOVED /;"	d
SQLITE_FCNTL_JOURNAL_POINTER	sqlite3.h	/^#define SQLITE_FCNTL_JOURNAL_POINTER /;"	d
SQLITE_FCNTL_LAST_ERRNO	sqlite3.h	/^#define SQLITE_FCNTL_LAST_ERRNO /;"	d
SQLITE_FCNTL_LOCKSTATE	sqlite3.h	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d
SQLITE_FCNTL_LOCK_TIMEOUT	sqlite3.h	/^#define SQLITE_FCNTL_LOCK_TIMEOUT /;"	d
SQLITE_FCNTL_MMAP_SIZE	sqlite3.h	/^#define SQLITE_FCNTL_MMAP_SIZE /;"	d
SQLITE_FCNTL_OVERWRITE	sqlite3.h	/^#define SQLITE_FCNTL_OVERWRITE /;"	d
SQLITE_FCNTL_PDB	sqlite3.h	/^#define SQLITE_FCNTL_PDB /;"	d
SQLITE_FCNTL_PERSIST_WAL	sqlite3.h	/^#define SQLITE_FCNTL_PERSIST_WAL /;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite3.h	/^#define SQLITE_FCNTL_POWERSAFE_OVERWRITE /;"	d
SQLITE_FCNTL_PRAGMA	sqlite3.h	/^#define SQLITE_FCNTL_PRAGMA /;"	d
SQLITE_FCNTL_RBU	sqlite3.h	/^#define SQLITE_FCNTL_RBU /;"	d
SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE	sqlite3.h	/^#define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE /;"	d
SQLITE_FCNTL_SET_LOCKPROXYFILE	sqlite3.h	/^#define SQLITE_FCNTL_SET_LOCKPROXYFILE /;"	d
SQLITE_FCNTL_SIZE_HINT	sqlite3.h	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d
SQLITE_FCNTL_SYNC	sqlite3.h	/^#define SQLITE_FCNTL_SYNC /;"	d
SQLITE_FCNTL_SYNC_OMITTED	sqlite3.h	/^#define SQLITE_FCNTL_SYNC_OMITTED /;"	d
SQLITE_FCNTL_TEMPFILENAME	sqlite3.h	/^#define SQLITE_FCNTL_TEMPFILENAME /;"	d
SQLITE_FCNTL_TRACE	sqlite3.h	/^#define SQLITE_FCNTL_TRACE /;"	d
SQLITE_FCNTL_VFSNAME	sqlite3.h	/^#define SQLITE_FCNTL_VFSNAME /;"	d
SQLITE_FCNTL_VFS_POINTER	sqlite3.h	/^#define SQLITE_FCNTL_VFS_POINTER /;"	d
SQLITE_FCNTL_WAL_BLOCK	sqlite3.h	/^#define SQLITE_FCNTL_WAL_BLOCK /;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite3.h	/^#define SQLITE_FCNTL_WIN32_AV_RETRY /;"	d
SQLITE_FCNTL_WIN32_GET_HANDLE	sqlite3.h	/^#define SQLITE_FCNTL_WIN32_GET_HANDLE /;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite3.h	/^#define SQLITE_FCNTL_WIN32_SET_HANDLE /;"	d
SQLITE_FCNTL_ZIPVFS	sqlite3.h	/^#define SQLITE_FCNTL_ZIPVFS /;"	d
SQLITE_FLOAT	sqlite3.h	/^#define SQLITE_FLOAT /;"	d
SQLITE_FORMAT	sqlite3.h	/^#define SQLITE_FORMAT /;"	d
SQLITE_FULL	sqlite3.h	/^#define SQLITE_FULL /;"	d
SQLITE_FUNCTION	sqlite3.h	/^#define SQLITE_FUNCTION /;"	d
SQLITE_GET_LOCKPROXYFILE	sqlite3.h	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d
SQLITE_IGNORE	sqlite3.h	/^#define SQLITE_IGNORE /;"	d
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d
SQLITE_INDEX_CONSTRAINT_FUNCTION	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_FUNCTION /;"	d
SQLITE_INDEX_CONSTRAINT_GE	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d
SQLITE_INDEX_CONSTRAINT_GLOB	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GLOB /;"	d
SQLITE_INDEX_CONSTRAINT_GT	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d
SQLITE_INDEX_CONSTRAINT_IS	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_IS /;"	d
SQLITE_INDEX_CONSTRAINT_ISNOT	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_ISNOT /;"	d
SQLITE_INDEX_CONSTRAINT_ISNOTNULL	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL /;"	d
SQLITE_INDEX_CONSTRAINT_ISNULL	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_ISNULL /;"	d
SQLITE_INDEX_CONSTRAINT_LE	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d
SQLITE_INDEX_CONSTRAINT_LIKE	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LIKE /;"	d
SQLITE_INDEX_CONSTRAINT_LT	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d
SQLITE_INDEX_CONSTRAINT_NE	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_NE /;"	d
SQLITE_INDEX_CONSTRAINT_REGEXP	sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_REGEXP /;"	d
SQLITE_INDEX_SCAN_UNIQUE	sqlite3.h	/^#define SQLITE_INDEX_SCAN_UNIQUE /;"	d
SQLITE_INSERT	sqlite3.h	/^#define SQLITE_INSERT /;"	d
SQLITE_INTEGER	sqlite3.h	/^#define SQLITE_INTEGER /;"	d
SQLITE_INTERNAL	sqlite3.h	/^#define SQLITE_INTERNAL /;"	d
SQLITE_INTERRUPT	sqlite3.h	/^#define SQLITE_INTERRUPT /;"	d
SQLITE_IOCAP_ATOMIC	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC /;"	d
SQLITE_IOCAP_ATOMIC16K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d
SQLITE_IOCAP_ATOMIC1K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d
SQLITE_IOCAP_ATOMIC2K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d
SQLITE_IOCAP_ATOMIC32K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d
SQLITE_IOCAP_ATOMIC4K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d
SQLITE_IOCAP_ATOMIC512	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d
SQLITE_IOCAP_ATOMIC64K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d
SQLITE_IOCAP_ATOMIC8K	sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d
SQLITE_IOCAP_BATCH_ATOMIC	sqlite3.h	/^#define SQLITE_IOCAP_BATCH_ATOMIC /;"	d
SQLITE_IOCAP_IMMUTABLE	sqlite3.h	/^#define SQLITE_IOCAP_IMMUTABLE /;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite3.h	/^#define SQLITE_IOCAP_POWERSAFE_OVERWRITE /;"	d
SQLITE_IOCAP_SAFE_APPEND	sqlite3.h	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d
SQLITE_IOCAP_SEQUENTIAL	sqlite3.h	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3.h	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d
SQLITE_IOERR	sqlite3.h	/^#define SQLITE_IOERR /;"	d
SQLITE_IOERR_ACCESS	sqlite3.h	/^#define SQLITE_IOERR_ACCESS /;"	d
SQLITE_IOERR_AUTH	sqlite3.h	/^#define SQLITE_IOERR_AUTH /;"	d
SQLITE_IOERR_BEGIN_ATOMIC	sqlite3.h	/^#define SQLITE_IOERR_BEGIN_ATOMIC /;"	d
SQLITE_IOERR_BLOCKED	sqlite3.h	/^#define SQLITE_IOERR_BLOCKED /;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3.h	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d
SQLITE_IOERR_CLOSE	sqlite3.h	/^#define SQLITE_IOERR_CLOSE /;"	d
SQLITE_IOERR_COMMIT_ATOMIC	sqlite3.h	/^#define SQLITE_IOERR_COMMIT_ATOMIC /;"	d
SQLITE_IOERR_CONVPATH	sqlite3.h	/^#define SQLITE_IOERR_CONVPATH /;"	d
SQLITE_IOERR_DELETE	sqlite3.h	/^#define SQLITE_IOERR_DELETE /;"	d
SQLITE_IOERR_DELETE_NOENT	sqlite3.h	/^#define SQLITE_IOERR_DELETE_NOENT /;"	d
SQLITE_IOERR_DIR_CLOSE	sqlite3.h	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d
SQLITE_IOERR_DIR_FSYNC	sqlite3.h	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d
SQLITE_IOERR_FSTAT	sqlite3.h	/^#define SQLITE_IOERR_FSTAT /;"	d
SQLITE_IOERR_FSYNC	sqlite3.h	/^#define SQLITE_IOERR_FSYNC /;"	d
SQLITE_IOERR_GETTEMPPATH	sqlite3.h	/^#define SQLITE_IOERR_GETTEMPPATH /;"	d
SQLITE_IOERR_LOCK	sqlite3.h	/^#define SQLITE_IOERR_LOCK /;"	d
SQLITE_IOERR_MMAP	sqlite3.h	/^#define SQLITE_IOERR_MMAP /;"	d
SQLITE_IOERR_NOMEM	sqlite3.h	/^#define SQLITE_IOERR_NOMEM /;"	d
SQLITE_IOERR_RDLOCK	sqlite3.h	/^#define SQLITE_IOERR_RDLOCK /;"	d
SQLITE_IOERR_READ	sqlite3.h	/^#define SQLITE_IOERR_READ /;"	d
SQLITE_IOERR_ROLLBACK_ATOMIC	sqlite3.h	/^#define SQLITE_IOERR_ROLLBACK_ATOMIC /;"	d
SQLITE_IOERR_SEEK	sqlite3.h	/^#define SQLITE_IOERR_SEEK /;"	d
SQLITE_IOERR_SHMLOCK	sqlite3.h	/^#define SQLITE_IOERR_SHMLOCK /;"	d
SQLITE_IOERR_SHMMAP	sqlite3.h	/^#define SQLITE_IOERR_SHMMAP /;"	d
SQLITE_IOERR_SHMOPEN	sqlite3.h	/^#define SQLITE_IOERR_SHMOPEN /;"	d
SQLITE_IOERR_SHMSIZE	sqlite3.h	/^#define SQLITE_IOERR_SHMSIZE /;"	d
SQLITE_IOERR_SHORT_READ	sqlite3.h	/^#define SQLITE_IOERR_SHORT_READ /;"	d
SQLITE_IOERR_TRUNCATE	sqlite3.h	/^#define SQLITE_IOERR_TRUNCATE /;"	d
SQLITE_IOERR_UNLOCK	sqlite3.h	/^#define SQLITE_IOERR_UNLOCK /;"	d
SQLITE_IOERR_VNODE	sqlite3.h	/^#define SQLITE_IOERR_VNODE /;"	d
SQLITE_IOERR_WRITE	sqlite3.h	/^#define SQLITE_IOERR_WRITE /;"	d
SQLITE_LAST_ERRNO	sqlite3.h	/^#define SQLITE_LAST_ERRNO /;"	d
SQLITE_LIMIT_ATTACHED	sqlite3.h	/^#define SQLITE_LIMIT_ATTACHED /;"	d
SQLITE_LIMIT_COLUMN	sqlite3.h	/^#define SQLITE_LIMIT_COLUMN /;"	d
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3.h	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d
SQLITE_LIMIT_EXPR_DEPTH	sqlite3.h	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d
SQLITE_LIMIT_FUNCTION_ARG	sqlite3.h	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d
SQLITE_LIMIT_LENGTH	sqlite3.h	/^#define SQLITE_LIMIT_LENGTH /;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3.h	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d
SQLITE_LIMIT_SQL_LENGTH	sqlite3.h	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3.h	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3.h	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d
SQLITE_LIMIT_VDBE_OP	sqlite3.h	/^#define SQLITE_LIMIT_VDBE_OP /;"	d
SQLITE_LIMIT_WORKER_THREADS	sqlite3.h	/^#define SQLITE_LIMIT_WORKER_THREADS /;"	d
SQLITE_LOCKED	sqlite3.h	/^#define SQLITE_LOCKED /;"	d
SQLITE_LOCKED_SHAREDCACHE	sqlite3.h	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d
SQLITE_LOCKED_VTAB	sqlite3.h	/^#define SQLITE_LOCKED_VTAB /;"	d
SQLITE_LOCK_EXCLUSIVE	sqlite3.h	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d
SQLITE_LOCK_NONE	sqlite3.h	/^#define SQLITE_LOCK_NONE /;"	d
SQLITE_LOCK_PENDING	sqlite3.h	/^#define SQLITE_LOCK_PENDING /;"	d
SQLITE_LOCK_RESERVED	sqlite3.h	/^#define SQLITE_LOCK_RESERVED /;"	d
SQLITE_LOCK_SHARED	sqlite3.h	/^#define SQLITE_LOCK_SHARED /;"	d
SQLITE_MISMATCH	sqlite3.h	/^#define SQLITE_MISMATCH /;"	d
SQLITE_MISUSE	sqlite3.h	/^#define SQLITE_MISUSE /;"	d
SQLITE_MUTEX_FAST	sqlite3.h	/^#define SQLITE_MUTEX_FAST /;"	d
SQLITE_MUTEX_RECURSIVE	sqlite3.h	/^#define SQLITE_MUTEX_RECURSIVE /;"	d
SQLITE_MUTEX_STATIC_APP1	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP1 /;"	d
SQLITE_MUTEX_STATIC_APP2	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP2 /;"	d
SQLITE_MUTEX_STATIC_APP3	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP3 /;"	d
SQLITE_MUTEX_STATIC_LRU	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d
SQLITE_MUTEX_STATIC_LRU2	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d
SQLITE_MUTEX_STATIC_MASTER	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d
SQLITE_MUTEX_STATIC_MEM	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d
SQLITE_MUTEX_STATIC_MEM2	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d
SQLITE_MUTEX_STATIC_OPEN	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d
SQLITE_MUTEX_STATIC_PMEM	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_PMEM /;"	d
SQLITE_MUTEX_STATIC_PRNG	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d
SQLITE_MUTEX_STATIC_VFS1	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS1 /;"	d
SQLITE_MUTEX_STATIC_VFS2	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS2 /;"	d
SQLITE_MUTEX_STATIC_VFS3	sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS3 /;"	d
SQLITE_NOLFS	sqlite3.h	/^#define SQLITE_NOLFS /;"	d
SQLITE_NOMEM	sqlite3.h	/^#define SQLITE_NOMEM /;"	d
SQLITE_NOTADB	sqlite3.h	/^#define SQLITE_NOTADB /;"	d
SQLITE_NOTFOUND	sqlite3.h	/^#define SQLITE_NOTFOUND /;"	d
SQLITE_NOTICE	sqlite3.h	/^#define SQLITE_NOTICE /;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite3.h	/^#define SQLITE_NOTICE_RECOVER_ROLLBACK /;"	d
SQLITE_NOTICE_RECOVER_WAL	sqlite3.h	/^#define SQLITE_NOTICE_RECOVER_WAL /;"	d
SQLITE_NULL	sqlite3.h	/^#define SQLITE_NULL /;"	d
SQLITE_OK	sqlite3.h	/^#define SQLITE_OK /;"	d
SQLITE_OK_LOAD_PERMANENTLY	sqlite3.h	/^#define SQLITE_OK_LOAD_PERMANENTLY /;"	d
SQLITE_OPEN_AUTOPROXY	sqlite3.h	/^#define SQLITE_OPEN_AUTOPROXY /;"	d
SQLITE_OPEN_CREATE	sqlite3.h	/^#define SQLITE_OPEN_CREATE /;"	d
SQLITE_OPEN_DELETEONCLOSE	sqlite3.h	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d
SQLITE_OPEN_EXCLUSIVE	sqlite3.h	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d
SQLITE_OPEN_FULLMUTEX	sqlite3.h	/^#define SQLITE_OPEN_FULLMUTEX /;"	d
SQLITE_OPEN_MAIN_DB	sqlite3.h	/^#define SQLITE_OPEN_MAIN_DB /;"	d
SQLITE_OPEN_MAIN_JOURNAL	sqlite3.h	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d
SQLITE_OPEN_MASTER_JOURNAL	sqlite3.h	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d
SQLITE_OPEN_MEMORY	sqlite3.h	/^#define SQLITE_OPEN_MEMORY /;"	d
SQLITE_OPEN_NOMUTEX	sqlite3.h	/^#define SQLITE_OPEN_NOMUTEX /;"	d
SQLITE_OPEN_PRIVATECACHE	sqlite3.h	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d
SQLITE_OPEN_READONLY	sqlite3.h	/^#define SQLITE_OPEN_READONLY /;"	d
SQLITE_OPEN_READWRITE	sqlite3.h	/^#define SQLITE_OPEN_READWRITE /;"	d
SQLITE_OPEN_SHAREDCACHE	sqlite3.h	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d
SQLITE_OPEN_SUBJOURNAL	sqlite3.h	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d
SQLITE_OPEN_TEMP_DB	sqlite3.h	/^#define SQLITE_OPEN_TEMP_DB /;"	d
SQLITE_OPEN_TEMP_JOURNAL	sqlite3.h	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d
SQLITE_OPEN_TRANSIENT_DB	sqlite3.h	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d
SQLITE_OPEN_URI	sqlite3.h	/^#define SQLITE_OPEN_URI /;"	d
SQLITE_OPEN_WAL	sqlite3.h	/^#define SQLITE_OPEN_WAL /;"	d
SQLITE_PERM	sqlite3.h	/^#define SQLITE_PERM /;"	d
SQLITE_PRAGMA	sqlite3.h	/^#define SQLITE_PRAGMA /;"	d
SQLITE_PREPARE_NORMALIZE	sqlite3.h	/^#define SQLITE_PREPARE_NORMALIZE /;"	d
SQLITE_PREPARE_PERSISTENT	sqlite3.h	/^#define SQLITE_PREPARE_PERSISTENT /;"	d
SQLITE_PROTOCOL	sqlite3.h	/^#define SQLITE_PROTOCOL /;"	d
SQLITE_RANGE	sqlite3.h	/^#define SQLITE_RANGE /;"	d
SQLITE_READ	sqlite3.h	/^#define SQLITE_READ /;"	d
SQLITE_READONLY	sqlite3.h	/^#define SQLITE_READONLY /;"	d
SQLITE_READONLY_CANTINIT	sqlite3.h	/^#define SQLITE_READONLY_CANTINIT /;"	d
SQLITE_READONLY_CANTLOCK	sqlite3.h	/^#define SQLITE_READONLY_CANTLOCK /;"	d
SQLITE_READONLY_DBMOVED	sqlite3.h	/^#define SQLITE_READONLY_DBMOVED /;"	d
SQLITE_READONLY_DIRECTORY	sqlite3.h	/^#define SQLITE_READONLY_DIRECTORY /;"	d
SQLITE_READONLY_RECOVERY	sqlite3.h	/^#define SQLITE_READONLY_RECOVERY /;"	d
SQLITE_READONLY_ROLLBACK	sqlite3.h	/^#define SQLITE_READONLY_ROLLBACK /;"	d
SQLITE_RECURSIVE	sqlite3.h	/^#define SQLITE_RECURSIVE /;"	d
SQLITE_REINDEX	sqlite3.h	/^#define SQLITE_REINDEX /;"	d
SQLITE_REPLACE	sqlite3.h	/^#define SQLITE_REPLACE /;"	d
SQLITE_ROLLBACK	sqlite3.h	/^#define SQLITE_ROLLBACK /;"	d
SQLITE_ROW	sqlite3.h	/^#define SQLITE_ROW /;"	d
SQLITE_SAVEPOINT	sqlite3.h	/^#define SQLITE_SAVEPOINT /;"	d
SQLITE_SCANSTAT_EST	sqlite3.h	/^#define SQLITE_SCANSTAT_EST /;"	d
SQLITE_SCANSTAT_EXPLAIN	sqlite3.h	/^#define SQLITE_SCANSTAT_EXPLAIN /;"	d
SQLITE_SCANSTAT_NAME	sqlite3.h	/^#define SQLITE_SCANSTAT_NAME /;"	d
SQLITE_SCANSTAT_NLOOP	sqlite3.h	/^#define SQLITE_SCANSTAT_NLOOP /;"	d
SQLITE_SCANSTAT_NVISIT	sqlite3.h	/^#define SQLITE_SCANSTAT_NVISIT /;"	d
SQLITE_SCANSTAT_SELECTID	sqlite3.h	/^#define SQLITE_SCANSTAT_SELECTID /;"	d
SQLITE_SCHEMA	sqlite3.h	/^#define SQLITE_SCHEMA /;"	d
SQLITE_SELECT	sqlite3.h	/^#define SQLITE_SELECT /;"	d
SQLITE_SERIALIZE_NOCOPY	sqlite3.h	/^#define SQLITE_SERIALIZE_NOCOPY /;"	d
SQLITE_SESSION_CONFIG_STRMSIZE	sqlite3.h	/^#define SQLITE_SESSION_CONFIG_STRMSIZE /;"	d
SQLITE_SET_LOCKPROXYFILE	sqlite3.h	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d
SQLITE_SHM_EXCLUSIVE	sqlite3.h	/^#define SQLITE_SHM_EXCLUSIVE /;"	d
SQLITE_SHM_LOCK	sqlite3.h	/^#define SQLITE_SHM_LOCK /;"	d
SQLITE_SHM_NLOCK	sqlite3.h	/^#define SQLITE_SHM_NLOCK /;"	d
SQLITE_SHM_SHARED	sqlite3.h	/^#define SQLITE_SHM_SHARED /;"	d
SQLITE_SHM_UNLOCK	sqlite3.h	/^#define SQLITE_SHM_UNLOCK /;"	d
SQLITE_SOURCE_ID	sqlite3.h	/^#define SQLITE_SOURCE_ID /;"	d
SQLITE_STATIC	sqlite3.h	/^#define SQLITE_STATIC /;"	d
SQLITE_STATUS_MALLOC_COUNT	sqlite3.h	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d
SQLITE_STATUS_MALLOC_SIZE	sqlite3.h	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d
SQLITE_STATUS_MEMORY_USED	sqlite3.h	/^#define SQLITE_STATUS_MEMORY_USED /;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d
SQLITE_STATUS_PAGECACHE_USED	sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d
SQLITE_STATUS_PARSER_STACK	sqlite3.h	/^#define SQLITE_STATUS_PARSER_STACK /;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d
SQLITE_STATUS_SCRATCH_SIZE	sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d
SQLITE_STATUS_SCRATCH_USED	sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d
SQLITE_STDCALL	sqlite3.h	/^# define SQLITE_STDCALL /;"	d
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3.h	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3.h	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d
SQLITE_STMTSTATUS_MEMUSED	sqlite3.h	/^#define SQLITE_STMTSTATUS_MEMUSED /;"	d
SQLITE_STMTSTATUS_REPREPARE	sqlite3.h	/^#define SQLITE_STMTSTATUS_REPREPARE /;"	d
SQLITE_STMTSTATUS_RUN	sqlite3.h	/^#define SQLITE_STMTSTATUS_RUN /;"	d
SQLITE_STMTSTATUS_SORT	sqlite3.h	/^#define SQLITE_STMTSTATUS_SORT /;"	d
SQLITE_STMTSTATUS_VM_STEP	sqlite3.h	/^#define SQLITE_STMTSTATUS_VM_STEP /;"	d
SQLITE_SYNC_DATAONLY	sqlite3.h	/^#define SQLITE_SYNC_DATAONLY /;"	d
SQLITE_SYNC_FULL	sqlite3.h	/^#define SQLITE_SYNC_FULL /;"	d
SQLITE_SYNC_NORMAL	sqlite3.h	/^#define SQLITE_SYNC_NORMAL /;"	d
SQLITE_SYSAPI	sqlite3.h	/^# define SQLITE_SYSAPI$/;"	d
SQLITE_TESTCTRL_ALWAYS	sqlite3.h	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d
SQLITE_TESTCTRL_ASSERT	sqlite3.h	/^#define SQLITE_TESTCTRL_ASSERT /;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3.h	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3.h	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d
SQLITE_TESTCTRL_BYTEORDER	sqlite3.h	/^#define SQLITE_TESTCTRL_BYTEORDER /;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite3.h	/^#define SQLITE_TESTCTRL_EXPLAIN_STMT /;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3.h	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d
SQLITE_TESTCTRL_FIRST	sqlite3.h	/^#define SQLITE_TESTCTRL_FIRST /;"	d
SQLITE_TESTCTRL_IMPOSTER	sqlite3.h	/^#define SQLITE_TESTCTRL_IMPOSTER /;"	d
SQLITE_TESTCTRL_INTERNAL_FUNCTIONS	sqlite3.h	/^#define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS /;"	d
SQLITE_TESTCTRL_ISINIT	sqlite3.h	/^#define SQLITE_TESTCTRL_ISINIT /;"	d
SQLITE_TESTCTRL_ISKEYWORD	sqlite3.h	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d
SQLITE_TESTCTRL_LAST	sqlite3.h	/^#define SQLITE_TESTCTRL_LAST /;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3.h	/^#define SQLITE_TESTCTRL_LOCALTIME_FAULT /;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite3.h	/^#define SQLITE_TESTCTRL_NEVER_CORRUPT /;"	d
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	sqlite3.h	/^#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD /;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3.h	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d
SQLITE_TESTCTRL_PARSER_COVERAGE	sqlite3.h	/^#define SQLITE_TESTCTRL_PARSER_COVERAGE /;"	d
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3.h	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d
SQLITE_TESTCTRL_PRNG_RESET	sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d
SQLITE_TESTCTRL_RESERVE	sqlite3.h	/^#define SQLITE_TESTCTRL_RESERVE /;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3.h	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d
SQLITE_TESTCTRL_SORTER_MMAP	sqlite3.h	/^#define SQLITE_TESTCTRL_SORTER_MMAP /;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite3.h	/^#define SQLITE_TESTCTRL_VDBE_COVERAGE /;"	d
SQLITE_TEXT	sqlite3.h	/^# define SQLITE_TEXT /;"	d
SQLITE_TOOBIG	sqlite3.h	/^#define SQLITE_TOOBIG /;"	d
SQLITE_TRACE_CLOSE	sqlite3.h	/^#define SQLITE_TRACE_CLOSE /;"	d
SQLITE_TRACE_PROFILE	sqlite3.h	/^#define SQLITE_TRACE_PROFILE /;"	d
SQLITE_TRACE_ROW	sqlite3.h	/^#define SQLITE_TRACE_ROW /;"	d
SQLITE_TRACE_STMT	sqlite3.h	/^#define SQLITE_TRACE_STMT /;"	d
SQLITE_TRANSACTION	sqlite3.h	/^#define SQLITE_TRANSACTION /;"	d
SQLITE_TRANSIENT	sqlite3.h	/^#define SQLITE_TRANSIENT /;"	d
SQLITE_UPDATE	sqlite3.h	/^#define SQLITE_UPDATE /;"	d
SQLITE_UTF16	sqlite3.h	/^#define SQLITE_UTF16 /;"	d
SQLITE_UTF16BE	sqlite3.h	/^#define SQLITE_UTF16BE /;"	d
SQLITE_UTF16LE	sqlite3.h	/^#define SQLITE_UTF16LE /;"	d
SQLITE_UTF16_ALIGNED	sqlite3.h	/^#define SQLITE_UTF16_ALIGNED /;"	d
SQLITE_UTF8	sqlite3.h	/^#define SQLITE_UTF8 /;"	d
SQLITE_VERSION	sqlite3.h	/^#define SQLITE_VERSION /;"	d
SQLITE_VERSION_NUMBER	sqlite3.h	/^#define SQLITE_VERSION_NUMBER /;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3.h	/^#define SQLITE_VTAB_CONSTRAINT_SUPPORT /;"	d
SQLITE_WARNING	sqlite3.h	/^#define SQLITE_WARNING /;"	d
SQLITE_WARNING_AUTOINDEX	sqlite3.h	/^#define SQLITE_WARNING_AUTOINDEX /;"	d
SQLITE_WIN32_DATA_DIRECTORY_TYPE	sqlite3.h	/^#define SQLITE_WIN32_DATA_DIRECTORY_TYPE /;"	d
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	sqlite3.h	/^#define SQLITE_WIN32_TEMP_DIRECTORY_TYPE /;"	d
STATUSREGNUM	rtu.h	/^#define		STATUSREGNUM	/;"	d
SUCCESS	rtu.h	/^#define 	SUCCESS	/;"	d
Select	csapp.c	/^int Select (int n , fd_set *readfds, fd_set * writefds, fd_set *exceptfds, struct timeval *timeo/;"	f	typeref:typename:int
Send	rtu.h	/^}Send;$/;"	t	typeref:struct:__anon104f7d960508
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid){$/;"	f	typeref:typename:void
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen)$/;"	f	typeref:typename:void
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler)$/;"	f	typeref:typename:handler_t *
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs)$/;"	f	typeref:typename:unsigned int
Socket	csapp.c	/^int Socket(int domain, int type, int protocol)$/;"	f	typeref:typename:int
TIOCGRS485	uartconfig.h	/^#define TIOCGRS485 /;"	d
TIOCSRS485	uartconfig.h	/^#define TIOCSRS485 /;"	d
UC	rtu.h	/^#define UC	/;"	d
USI	rtu.h	/^#define USI	/;"	d
Uart_485	uartconfig.c	/^void Uart_485(int fd)$/;"	f	typeref:typename:void
Uart_485	uartstub.c	/^void Uart_485(int fd)$/;"	f	typeref:typename:void
Uart_close	uartconfig.c	/^void Uart_close(int fd)$/;"	f	typeref:typename:void
Uart_close	uartstub.c	/^void Uart_close(int fd)$/;"	f	typeref:typename:void
Uart_config	uartconfig.c	/^void Uart_config(int fd, int bandrate)$/;"	f	typeref:typename:void
Uart_config	uartstub.c	/^void Uart_config(int fd, int bandrate)$/;"	f	typeref:typename:void
Uart_open	uartconfig.c	/^int Uart_open(const char* port)$/;"	f	typeref:typename:int
Uart_open	uartstub.c	/^int Uart_open(const char* port)$/;"	f	typeref:typename:int
Uart_read	uartconfig.c	/^int Uart_read(int fd, char *buf_read, int buf_len)$/;"	f	typeref:typename:int
Uart_read	uartstub.c	/^int Uart_read(int fd, char *b, int buf_len)$/;"	f	typeref:typename:int
Uart_send	uartconfig.c	/^int Uart_send(int fd, char *buf_send, int buf_len)$/;"	f	typeref:typename:int
Uart_send	uartstub.c	/^int Uart_send(int fd, char *buf_send, int buf_len)$/;"	f	typeref:typename:int
Wait	csapp.c	/^pid_t Wait(int *status)$/;"	f	typeref:typename:pid_t
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options)$/;"	f	typeref:typename:pid_t
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
_FTS5_H	sqlite3.h	/^#define _FTS5_H$/;"	d
_SQLITE3RTREE_H_	sqlite3.h	/^#define _SQLITE3RTREE_H_$/;"	d
__CSAPP_H__	csapp.h	/^#define __CSAPP_H__$/;"	d
__SQLITESESSION_H_	sqlite3.h	/^#define __SQLITESESSION_H_ /;"	d
__anon104f7d960108	rtu.h	/^typedef struct {$/;"	s
__anon104f7d960208	rtu.h	/^typedef struct {$/;"	s
__anon104f7d960308	rtu.h	/^typedef struct	{$/;"	s
__anon104f7d960408	rtu.h	/^typedef struct {$/;"	s
__anon104f7d960508	rtu.h	/^typedef struct {$/;"	s
__anondbe0f2720108	csapp.h	/^{$/;"	s
a	sqlite3.h	/^  const unsigned char *a;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *
aConstraint	sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint *
aConstraintUsage	sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage *
aCoord	sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *
aOrderBy	sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby *
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:sqlite3_rtree_dbl *
addr	dtu.py	/^    c, addr = s.accept()$/;"	v
anQueue	sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:unsigned int *
apSqlParam	sqlite3.h	/^  sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_value **
app_error	csapp.c	/^void app_error(char *msg)$/;"	f	typeref:typename:void
appenddtuinfo	protocol.c	/^int appenddtuinfo(Dsp *R, Env *E)$/;"	f	typeref:typename:int
argvIndex	sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:int
ascii2i	csapp.c	/^void ascii2i(unsigned char *hex, char *ascii,int len)$/;"	f	typeref:typename:void
b	sqlite3.h	/^  const unsigned char *b;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *
c	dtu.py	/^    c, addr = s.accept()$/;"	v
callback	dosqlite.c	/^static int callback(void *NotUsed, int argc, char **argv, char **azColName){$/;"	f	typeref:typename:int	file:
callback	qtsqlite.c	/^static int callback(void *NotUsed, int argc, char **argv, char **azColName){$/;"	f	typeref:typename:int	file:
check_Msg	protocol.c	/^int check_Msg(Dsp *R)$/;"	f	typeref:typename:int
code	rtu.h	/^	Code 	code;			\/\/命令编码 1 byte$/;"	m	struct:__anon104f7d960308	typeref:typename:Code
colUsed	sqlite3.h	/^  sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_uint64
crc	rtu.h	/^	USI 	crc;			\/\/crc校验码$/;"	m	struct:__anon104f7d960308	typeref:typename:USI
data	dtu.py	/^    data = c.recv(3);$/;"	v
data	rtu.h	/^	Data 	data;			\/\/数据域 最长32 byte $/;"	m	struct:__anon104f7d960308	typeref:typename:Data
data	rtu.h	/^	UC 		data;$/;"	m	struct:__anon104f7d960508	typeref:typename:UC
db	rtu.h	/^	void 	*db;				\/\/数据库   $/;"	m	struct:__anon104f7d960408	typeref:typename:void *
desc	sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:unsigned char
device	rtu.h	/^	UC 		device;			\/\/目的设备地址 1 byte$/;"	m	struct:__anon104f7d960308	typeref:typename:UC
dns_error	csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f	typeref:typename:void
doDsp	protocol.c	/^int doDsp(Dsp *R, Env *E)$/;"	f	typeref:typename:int
dodtuMsg	protocol.c	/^int dodtuMsg(Env *E){$/;"	f	typeref:typename:int
double	sqlite3.h	/^# define double /;"	d
drecv	rtu.h	/^	UC 		*drecv;$/;"	m	struct:__anon104f7d960308	typeref:typename:UC *
drecvlen	rtu.h	/^	UC		drecvlen;$/;"	m	struct:__anon104f7d960308	typeref:typename:UC
dsend	rtu.h	/^	UC		*dsend;$/;"	m	struct:__anon104f7d960308	typeref:typename:UC *
dsendlen	rtu.h	/^	UC		dsendlen;$/;"	m	struct:__anon104f7d960308	typeref:typename:UC
dspfd	rtu.h	/^	int		dspfd;				\/\/发往dsp的串口fd$/;"	m	struct:__anon104f7d960408	typeref:typename:int
dspset	rtu.h	/^	UC 		dspset[128];		\/\/所有dsp集合列表$/;"	m	struct:__anon104f7d960408	typeref:typename:UC[128]
dtufd	rtu.h	/^	int		dtufd;				\/\/发往dtu的串口fd$/;"	m	struct:__anon104f7d960408	typeref:typename:int
dtuinfo	rtu.h	/^	UC		*dtuinfo;			\/\/发往dtu的信息，定时刷新$/;"	m	struct:__anon104f7d960408	typeref:typename:UC *
dtuinfoend	rtu.h	/^	UC		*dtuinfoend;		\/\/指针指向dtuinfo结尾,dtu信息同步后需要重置$/;"	m	struct:__anon104f7d960408	typeref:typename:UC *
dturecv	rtu.h	/^	UC		dturecv[10];		\/\/dtu响应信息$/;"	m	struct:__anon104f7d960408	typeref:typename:UC[10]
dumpBuffer	csapp.c	/^void dumpBuffer(unsigned char *buffer, int elements)$/;"	f	typeref:typename:void
eParentWithin	sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
eWithin	sqlite3.h	/^  int eWithin;                      \/* OUT: Visibility *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
estimatedCost	sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:double
estimatedRows	sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_int64
fill_Data	protocol.c	/^void fill_Data(Dsp *R)$/;"	f	typeref:typename:void
fill_R	protocol.c	/^void fill_R(Dsp *R)$/;"	f	typeref:typename:void
fill_sql	protocol.c	/^void fill_sql(char *sql, Dsp *R)$/;"	f	typeref:typename:void
fill_sql	qtsqlite.c	/^void fill_sql(char *sql, Dsp *R)$/;"	f	typeref:typename:void
finish_R	protocol.c	/^void finish_R(Dsp *R)$/;"	f	typeref:typename:void
fts5_api	sqlite3.h	/^struct fts5_api {$/;"	s
fts5_api	sqlite3.h	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api
fts5_extension_function	sqlite3.h	/^typedef void (*fts5_extension_function)($/;"	t	typeref:typename:void (*)(const Fts5ExtensionApi * pApi,Fts5Context * pFts,sqlite3_context * pCtx,int nVal,sqlite3_value ** apVal)
fts5_tokenizer	sqlite3.h	/^struct fts5_tokenizer {$/;"	s
fts5_tokenizer	sqlite3.h	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer
gendspmodifyone	protocol.c	/^int gendspmodifyone(UC deviceid,UC cmdtype,UC rnum, Reg* regs, Dsp *R)$/;"	f	typeref:typename:int
gendspqueryone	protocol.c	/^int gendspqueryone(UC deviceid,UC cmdtype,UC regstart, UC rnum, Dsp *R)$/;"	f	typeref:typename:int
getclock	csapp.c	/^char * getclock(void)$/;"	f	typeref:typename:char *
head	rtu.h	/^	USI 	head;			\/\/帧头$/;"	m	struct:__anon104f7d960308	typeref:typename:USI
hidden	sqlite3.h	/^  unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot	typeref:typename:unsigned char[48]
host	dtu.py	/^host = socket.gethostbyname('jack60')$/;"	v
i2ascii	csapp.c	/^void i2ascii(char *ascii, unsigned char *number, int len)$/;"	f	typeref:typename:void
iColumn	sqlite3.h	/^     int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int
iColumn	sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:int
iLevel	sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
iRowid	sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_int64
iTermOffset	sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module	typeref:typename:int
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int
idxFlags	sqlite3.h	/^  int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
idxNum	sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
idxStr	sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:char *
initEnv	protocol.c	/^void initEnv(Env *E,char *logbuf,void *dbcon,int dspfd,int dtufd)$/;"	f	typeref:typename:void
initdtuinfo	protocol.c	/^int initdtuinfo(Env *E)$/;"	f	typeref:typename:int
insertdspid	dosqlite.c	/^int insertdspid(UC dspid,Env *E)$/;"	f	typeref:typename:int
len	rtu.h	/^	UC 		len;			\/\/长度1 byte$/;"	m	struct:__anon104f7d960308	typeref:typename:UC
logbuf	rtu.h	/^    char    *logbuf;         	\/\/日志缓存$/;"	m	struct:__anon104f7d960408	typeref:typename:char *
main	main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	test.c	/^int main()$/;"	f	typeref:typename:int
mxLevel	sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
mxPathname	sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
nConstraint	sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
nCoord	sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
nOrderBy	sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
nParam	sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
nParam	sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:int
nRef	sqlite3.h	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:int
name	rtu.h	/^	UC 		name;$/;"	m	struct:__anon104f7d960108	typeref:typename:UC
needToFreeIdxStr	sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
num	rtu.h	/^	UC 		num;$/;"	m	struct:__anon104f7d960208	typeref:typename:UC
omit	sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:unsigned char
op	sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, int port)$/;"	f	typeref:typename:int
open_listenfd	csapp.c	/^int open_listenfd(int port)$/;"	f	typeref:typename:int
orderByConsumed	sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
pAppData	sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void *
pAppData	sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:void *
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void *
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void *
pBuf	sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *
pContext	sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *
pContext	sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *
pExtra	sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *
pMethods	sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:typename:const struct sqlite3_io_methods *
pModule	sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:const sqlite3_module *
pNext	sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_vfs *
pUser	sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *
pUser	sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *
pVtab	sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	typeref:typename:sqlite3_vtab *
port	dtu.py	/^port = 5901$/;"	v
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f	typeref:typename:void
printHexArray	csapp.c	/^void printHexArray(unsigned char *hex, int len)$/;"	f	typeref:typename:void
printR	protocol.c	/^void printR(Dsp *R)$/;"	f	typeref:typename:void
project_opened	.ropeproject/config.py	/^def project_opened(project):$/;"	f
rParentScore	sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl
rScore	sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl
reflushdspset	dosqlite.c	/^int reflushdspset(Env *E)$/;"	f	typeref:typename:int
reg	rtu.h	/^	Reg 	reg[12];$/;"	m	struct:__anon104f7d960208	typeref:typename:Reg[12]
resetDB	dosqlite.c	/^int resetDB(Env *E)$/;"	f	typeref:typename:int
rio_buf	csapp.h	/^	char rio_buf[RIO_BUFSIZE];$/;"	m	struct:__anondbe0f2720108	typeref:typename:char[]
rio_bufptr	csapp.h	/^	char *rio_bufptr;$/;"	m	struct:__anondbe0f2720108	typeref:typename:char *
rio_cnt	csapp.h	/^	unsigned int rio_cnt;  \/\/ unread bytes in internal buf$/;"	m	struct:__anondbe0f2720108	typeref:typename:unsigned int
rio_fd	csapp.h	/^	int rio_fd;$/;"	m	struct:__anondbe0f2720108	typeref:typename:int
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	typeref:typename:ssize_t	file:
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd)$/;"	f	typeref:typename:void
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen)$/;"	f	typeref:typename:ssize_t
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void * userbuf, size_t n)$/;"	f	typeref:typename:ssize_t
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n)$/;"	f	typeref:typename:ssize_t
rio_t	csapp.h	/^}rio_t;$/;"	t	typeref:struct:__anondbe0f2720108
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *userbuf, size_t n)$/;"	f	typeref:typename:ssize_t
runlog	csapp.c	/^int runlog(char * file, int line, char * msg, ...)$/;"	f	typeref:typename:int
s	dtu.py	/^s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
savetodb	dosqlite.c	/^int savetodb(Dsp *R, Env *E)$/;"	f	typeref:typename:int
savetodb	qtsqlite.c	/^int savetodb(Dsp *R)$/;"	f	typeref:typename:int
scandsp	protocol.c	/^int scandsp(int num, Dsp *R, Env *E)$/;"	f	typeref:typename:int
sec	rtu.h	/^	time_t	sec;$/;"	m	struct:__anon104f7d960408	typeref:typename:time_t
send1and5comand	protocol.c	/^int send1and5comand(Dsp *R, Env *E)$/;"	f	typeref:typename:int
sendquerycommandtoalldsp	protocol.c	/^int sendquerycommandtoalldsp(UC cmdtype,UC regnum, Dsp *R, Env *E)$/;"	f	typeref:typename:int
set_prefs	.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
setlocalsec	protocol.c	/^int setlocalsec(Env *E, UC* recv)$/;"	f	typeref:typename:int
setupdspset	dosqlite.c	/^int setupdspset(Env *E)$/;"	f	typeref:typename:int
sqlite3	sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3_api_routines	sqlite3.h	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines
sqlite3_backup	sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_blob	sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_callback	sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	typeref:typename:int (*)(void *,int,char **,char **)
sqlite3_changegroup	sqlite3.h	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup
sqlite3_changeset_iter	sqlite3.h	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter
sqlite3_context	sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_data_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN char *
sqlite3_destructor_type	sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	typeref:typename:void (*)(void *)
sqlite3_file	sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_index_constraint	sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_int64	sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	typeref:typename:sqlite_int64
sqlite3_io_methods	sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_mem_methods	sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_module	sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mutex	sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_methods	sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_pcache	sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_rebaser	sqlite3.h	/^typedef struct sqlite3_rebaser sqlite3_rebaser;$/;"	t	typeref:struct:sqlite3_rebaser
sqlite3_rtree_dbl	sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t	typeref:typename:double
sqlite3_rtree_dbl	sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	typeref:typename:sqlite3_int64
sqlite3_rtree_geometry	sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_query_info	sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_session	sqlite3.h	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session
sqlite3_snapshot	sqlite3.h	/^typedef struct sqlite3_snapshot {$/;"	s
sqlite3_snapshot	sqlite3.h	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot
sqlite3_stmt	sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_str	sqlite3.h	/^typedef struct sqlite3_str sqlite3_str;$/;"	t	typeref:struct:sqlite3_str
sqlite3_syscall_ptr	sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	typeref:typename:void (*)(void)
sqlite3_temp_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN char *
sqlite3_uint64	sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	typeref:typename:sqlite_uint64
sqlite3_value	sqlite3.h	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value
sqlite3_version	sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN const char[]
sqlite3_vfs	sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vtab	sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_cursor	sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite_int64	sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	typeref:typename:SQLITE_INT64_TYPE
sqlite_int64	sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t	typeref:typename:__int64
sqlite_int64	sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t	typeref:typename:long long int
sqlite_uint64	sqlite3.h	/^    typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:SQLITE_UINT64_TYPE
sqlite_uint64	sqlite3.h	/^    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:unsigned SQLITE_INT64_TYPE
sqlite_uint64	sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	typeref:typename:unsigned __int64
sqlite_uint64	sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	typeref:typename:unsigned long long int
ssize_t	csapp.h	/^	#define	ssize_t /;"	d
start	rtu.h	/^	UC 		start;$/;"	m	struct:__anon104f7d960208	typeref:typename:UC
szOsFile	sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
uart_485	uartconfig.c	/^int uart_485(int fd)$/;"	f	typeref:typename:int
uart_config	uartconfig.c	/^int uart_config(int fd, int bandrate)$/;"	f	typeref:typename:int
uart_read	uartconfig.c	/^int uart_read(int fd, char *buf_read, int buf_len)$/;"	f	typeref:typename:int
uart_send	uartconfig.c	/^int uart_send(int fd, char *buf_send, int buf_len)$/;"	f	typeref:typename:int
unix_error	csapp.c	/^void unix_error(char *msg)$/;"	f	typeref:typename:void
updatedtu	protocol.c	/^int updatedtu(Env *E)$/;"	f	typeref:typename:int
updatelocaltime	protocol.c	/^int updatelocaltime(Env *E)$/;"	f	typeref:typename:int
usable	sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char
value	rtu.h	/^	USI 	value;$/;"	m	struct:__anon104f7d960108	typeref:typename:USI
xAccess	sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int flags,int * pResOut)
xBegin	sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xBestIndex	sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_index_info *)
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)
xCheckReservedLock	sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int * pResOut)
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xColumn	sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)
xColumnCount	sqlite3.h	/^  int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)
xColumnSize	sqlite3.h	/^  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,int * pnToken)
xColumnText	sqlite3.h	/^  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,const char ** pz,int * pn)
xColumnTotalSize	sqlite3.h	/^  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,sqlite3_int64 * pnToken)
xCommit	sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xConnect	sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)
xCreate	sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)
xCreate	sqlite3.h	/^  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(void *,const char ** azArg,int nArg,Fts5Tokenizer ** ppOut)
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:sqlite3_pcache * (*)(int szPage,int bPurgeable)
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache * (*)(int szPage,int szExtra,int bPurgeable)
xCreateFunction	sqlite3.h	/^  int (*xCreateFunction)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_extension_function xFunction,void (* xDestroy)(void *))
xCreateTokenizer	sqlite3.h	/^  int (*xCreateTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_tokenizer * pTokenizer,void (* xDestroy)(void *))
xCurrentTime	sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,double *)
xCurrentTimeInt64	sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,sqlite3_int64 *)
xDelUser	sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void (*)(void *)
xDelUser	sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void (*)(void *)
xDelete	sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int syncDir)
xDelete	sqlite3.h	/^  void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer	typeref:typename:void (*)(Fts5Tokenizer *)
xDestroy	sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *)
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)
xDeviceCharacteristics	sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xDisconnect	sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xDlClose	sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,void *)
xDlError	sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,int nByte,char * zErrMsg)
xDlOpen	sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	typeref:typename:void * (*)(sqlite3_vfs *,const char * zFilename)
xDlSym	sqlite3.h	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (* (*)(sqlite3_vfs *,void *,const char * zSymbol))(void)
xEof	sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xFetch	sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,int iAmt,void ** pp)
xFetch	sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache_page * (*)(sqlite3_pcache *,unsigned key,int createFlag)
xFetch	sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void * (*)(sqlite3_pcache *,unsigned key,int createFlag)
xFileControl	sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int op,void * pArg)
xFileSize	sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 * pSize)
xFilter	sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,int idxNum,const char * idxStr,int argc,sqlite3_value ** argv)
xFindFunction	sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,int nArg,const char * zName,void (** pxFunc)(sqlite3_context *,int,sqlite3_value **),void ** ppArg)
xFindTokenizer	sqlite3.h	/^  int (*xFindTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void ** ppContext,fts5_tokenizer * pTokenizer)
xFree	sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)
xFullPathname	sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int nOut,char * zOut)
xGetAuxdata	sqlite3.h	/^  void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *,int bClear)
xGetLastError	sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int,char *)
xGetSystemCall	sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_syscall_ptr (*)(sqlite3_vfs *,const char * zName)
xInit	sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(void *)
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(void *)
xInst	sqlite3.h	/^  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iIdx,int * piPhrase,int * piCol,int * piOff)
xInstCount	sqlite3.h	/^  int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int * pnInst)
xLock	sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)
xMalloc	sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(int)
xMutexAlloc	sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:sqlite3_mutex * (*)(int)
xMutexEnd	sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)
xMutexEnter	sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexFree	sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexHeld	sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xMutexInit	sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)
xMutexLeave	sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexNotheld	sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xMutexTry	sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xNext	sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xNextSystemCall	sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:const char * (*)(sqlite3_vfs *,const char * zName)
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_file *,int flags,int * pOutFlags)
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_vtab_cursor ** ppCursor)
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(sqlite3_pcache *)
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(sqlite3_pcache *)
xPhraseCount	sqlite3.h	/^  int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)
xPhraseFirst	sqlite3.h	/^  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *,int *)
xPhraseFirstColumn	sqlite3.h	/^  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *)
xPhraseNext	sqlite3.h	/^  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol,int * piOff)
xPhraseNextColumn	sqlite3.h	/^  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol)
xPhraseSize	sqlite3.h	/^  int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase)
xQueryPhrase	sqlite3.h	/^  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,void * pUserData,int (*)(const Fts5ExtensionApi *,Fts5Context *,void *))
xRandomness	sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int nByte,char * zOut)
xRead	sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,void *,int iAmt,sqlite3_int64 iOfst)
xRealloc	sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(void *,int)
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,unsigned oldKey,unsigned newKey)
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,unsigned oldKey,unsigned newKey)
xRelease	sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xRename	sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,const char * zNew)
xRollback	sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xRollbackTo	sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xRoundup	sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(int)
xRowCount	sqlite3.h	/^  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,sqlite3_int64 * pnRow)
xRowid	sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_int64 * pRowid)
xRowid	sqlite3.h	/^  sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:sqlite3_int64 (*)(Fts5Context *)
xSavepoint	sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xSectorSize	sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xSetAuxdata	sqlite3.h	/^  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,void * pAux,void (* xDelete)(void *))
xSetSystemCall	sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_syscall_ptr)
xShadowName	sqlite3.h	/^  int (*xShadowName)(const char*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(const char *)
xShmBarrier	sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:void (*)(sqlite3_file *)
xShmLock	sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int offset,int n,int flags)
xShmMap	sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int iPg,int pgsz,int,void volatile **)
xShmUnmap	sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int deleteFlag)
xShrink	sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(void *)
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(void *)
xSize	sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)
xSleep	sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int microseconds)
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int flags)
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xTokenize	sqlite3.h	/^  int (*xTokenize)(Fts5Context*, $/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,const char * pText,int nText,void * pCtx,int (* xToken)(void *,int,const char *,int,int,int))
xTokenize	sqlite3.h	/^  int (*xTokenize)(Fts5Tokenizer*, $/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(Fts5Tokenizer *,void * pCtx,int flags,const char * pText,int nText,int (* xToken)(void * pCtx,int tflags,const char * pToken,int nToken,int iStart,int iEnd))
xTruncate	sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 size)
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)
xUnfetch	sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,void * p)
xUnlock	sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,int discard)
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,int discard)
xUpdate	sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite3_int64 *)
xUserData	sqlite3.h	/^  void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *)
xWrite	sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,const void *,int iAmt,sqlite3_int64 iOfst)
zErrMsg	sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:char *
zName	sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:const char *
